🧠 What is the Redux Store?
The Redux store is a plain JavaScript object that:

Holds your application’s state

Allows access to that state via getState()

Allows state to be updated via dispatch(action)

Notifies the app when the state changes (so components can re-render)

🔁 Redux Store Flow

graph TD
A[Component] -- dispatch(action) --> B[Redux Store]
B -- runs --> C[Reducer]
C -- returns --> D[New State]
D --> A
🧩 Store in Action

1. Create a store

import { createStore } from 'redux';
import rootReducer from './reducers';

const store = createStore(rootReducer);
You usually do this once and provide it to your React app using <Provider> from react-redux.

2. The store holds state

const state = store.getState();
This returns the current app state tree managed by Redux.

3. Dispatch actions to update state

store.dispatch({ type: 'INCREMENT' });
This tells Redux: “Hey, something happened!” Then it calls the reducer to calculate the new state.

🏛 Structure Overview
A simple Redux store might look like:

{
  user: {
    name: 'Alice',
    isLoggedIn: true
  },
  cart: {
    items: [/*...*/]
  }
}
All your state, all in one place ✅

🧰 Redux Store + React
In a React app, you connect the store like this:


import { Provider } from 'react-redux';
import store from './store';

<Provider store={store}>
  <App />
</Provider>
Then you use useSelector and useDispatch to interact with the store from components.

🧠 TL;DR
The Redux store is a central container for all app state

You read from it with useSelector or store.getState()

You update it by dispatch()ing actions

It uses reducers to calculate the new state