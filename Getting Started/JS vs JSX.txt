JSX stands for javascript xml
it is used by react to writed HTML like code
JSX will be converted to JS via tools like babel because browsers can understand only JS
We can use the same .js extension, can also use .jsx for clarity in some cases

<!-- requires a transalator to translate from JSX to JS and a compiler (list the syntax error in the file) which will be taken care by Babel 
Babel is also known as transpiler -->

transpiler is a tool which converts source code from one high level programming lanuage to another high level programming language

A compiler is a tool which converts from a high level programming language into a lower level language(machine code)

import React from 'react';
import ReactDOM from 'react-dom/client';

const App = () => {
  const message = "Hello, React!";
  return <h1>{message}</h1>;
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

🔍 Here, <h1>{message}</h1> looks like HTML — but it's JSX.
It's easier to read and maintain.

🧠 Same Thing Without JSX (Plain JS)

import React from 'react';
import ReactDOM from 'react-dom/client';

const App = () => {
  const message = "Hello, React!";
  return React.createElement('h1', null, message);
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(React.createElement(App));
😵 Instead of <h1>{message}</h1>, we write:


React.createElement('h1', null, message)
And instead of:


<App />
We write:


React.createElement(App)
🧠 JSX is just syntactic sugar for React.createElement(...)
It makes writing components:

Cleaner 🧼

More HTML-like 🧱

Easier to visualize the DOM 🧠



