Absolutely! useLocation is another key hook from React Router, and it's perfect when you want to know where you are in the app — like getting the current path, query params, or state passed from another route.

📍 What is useLocation?
useLocation returns the current location object, which tells you all about the URL that's currently loaded.

🧠 Syntax:

const location = useLocation();
It gives you an object like this:


{
  pathname: "/dashboard",
  search: "?tab=profile",
  hash: "#top",
  state: { userId: 123 },
  key: "abc123" // unique ID for the location
}
🔍 Each part explained:
pathname: the path of the URL (/dashboard, /user/42, etc.)

search: the query string (everything after the ?)

hash: the fragment identifier (like #section)

state: optional data passed via navigate()

key: internal ID for React Router (you usually won’t need this)

🧪 Example:

import { useLocation } from 'react-router-dom';

function ShowLocation() {
  const location = useLocation();

  return (
    <div>
      <p>Path: {location.pathname}</p>
      <p>Search: {location.search}</p>
      <p>Hash: {location.hash}</p>
    </div>
  );
}
If you're on /profile?tab=posts#comments, it would show:


pathname: "/profile"
search: "?tab=posts"
hash: "#comments"
🔁 Paired with navigate + state

navigate('/dashboard', { state: { from: 'login' } });
Then in /dashboard:


const location = useLocation();
console.log(location.state.from); // "login"
🧠 When to use it?
Access query params or hashes

Read state passed between routes

Track current route for conditional logic

Log page changes (for analytics, etc.)

