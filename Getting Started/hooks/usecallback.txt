What is useCallback?
useCallback is a React Hook that returns a memoized version of a function ‚Äî meaning the function will not be re-created on every render, unless its dependencies change.

üìå Why use it?
Every time a component re-renders, all the functions defined inside it are re-created.
This can lead to performance issues or unnecessary re-renders of child components ‚Äî especially when passing functions as props.

‚úÖ Syntax:

const memoizedCallback = useCallback(() => {
  // some function logic
}, [dependencies]);
üß™ Example: Without useCallback

function Parent() {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    console.log('Clicked!');
  };

  return <Child onClick={handleClick} />;
}
üîÅ Every time Parent re-renders, handleClick is re-created, and that could trigger a re-render in Child, even if nothing else changed.

‚úÖ With useCallback

const handleClick = useCallback(() => {
  console.log('Clicked!');
}, []);
Now handleClick is memoized ‚Äî it stays the same between renders unless its dependencies change.

üß† Real-World Use Case: With React.memo
If you're using React.memo() to memoize child components, and passing them functions as props, you'll want those functions to stay the same unless truly needed. That‚Äôs when useCallback shines.


const Child = React.memo(({ onClick }) => {
  console.log('Child render');
  return <button onClick={onClick}>Click me</button>;
});

function Parent() {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    console.log('Clicked!');
  }, []);

  return (
    <>
      <Child onClick={handleClick} />
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </>
  );
}
üéØ Result:
Child only re-renders when handleClick changes ‚Äî which is never, unless you change its dependencies.

üîç useCallback vs useMemo
Hook	Purpose
useCallback(fn, deps)	Returns a memoized function
useMemo(() => fn(), deps)	Returns a memoized value/result
‚ö†Ô∏è When not to use useCallback
Don't use it just everywhere blindly ‚Äî only when:

You're passing functions as props to memoized children

You notice performance issues or unnecessary re-renders

The function is expensive to recreate

