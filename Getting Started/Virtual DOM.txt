DOM - Document Object Model
-- tree structure of the various html elements
-- one root node
-- Parent child relationship
-- manipulate the dom -- javascript
document.getElementById("root")
-- making changes to the DOM -- costly affair

Virtual DOM
-- DOM(tree structure) which exists only in memory 
-- never loaded in browser

React app -- return the virtual DOM
Initial app load --> virtual DOM -- mapped to the real Dom and real dom will be created
user will start the interactions -- click on a button --> requirement -- changes to be done to the real DOM 
will changes happen on the real DOM directly -- NO
React js -- return a new virtual DOM with the changes
Diffing algorithm -- find the differences b/w 2 virtual DOM
Updation to the real DOM -- on basis of the changes given by diffing algorithm; will update the changes and not refresh the entire page
Webpage -100 elements
React -- virtual Dom with 100 elements
virtual DOM --> mapped real DOM
real DOM -- > 100 elements --> loaded in the browser
user click on button ; 2 html changes to be made
return a new virtual dOM with 2 changes done
diffing algorithm -- find the differences
Real dom is updated based on the changes;only 2 elements will be refreshed ; other 98 elements will be untouched; 
user interaction
return a new virtual dOM with changes done
Now -- 3 virtual DOM
diffing algorithm -- find the differences b/w 2 virtual DOM (last 2 virtual DOM)
At any given time, Only two virtual DOM exists in memory 
The remaining Virtual DOMs will go out of scope ‚Äì Garbage collection

Example:
time for 1 element refresh -- x
cost for 1 element refresh -- y

React vs non react app
2x(+ return a virtual DOM; diffing algo -- time)= m vs 100x  -- Time ; m much lesser < 100x 
2y vs 100y  -- cost 

memory -- 2 virtual DOM, real DOM; diffing algo  :more 
4gb (9 years back) -- 500 - 700
4gb (today) -- 150

Definition	
The actual representation of the HTML document in memory.	
An in-memory, lightweight copy of the real DOM.

Performance	
Manipulating the real DOM is slow and costly.	
Virtual DOM optimizes re-rendering by minimizing real DOM updates.

Re-rendering Process	
Changes to the DOM require full reflows/repaints.	
Only the necessary changes are made to the real DOM after diffing.

Use Case	
Used for direct interaction with web page content.	
Used in frameworks like React for efficient UI updates.

Memory Usage	
Consumes more memory and resources as the full DOM is represented in memory.	
Lightweight, only stores an abstract representation of the DOM.

Framework	
No specific framework is required.	
Typically used in frameworks like React, Vue, Angular.

Step	Description
1. Initial Render	Create Virtual DOM and render real DOM
2. State Change	UI changes ‚Üí new Virtual DOM is created
3. Diffing	New vs Old Virtual DOM compared
4. Reconciliation	Calculate minimal changes needed
5. DOM Update	Real DOM is updated with only the necessary changes

Rendering is the process of displaying content on the screen ‚Äî it's how your browser or framework takes HTML, CSS, and JavaScript and turns it into the visual web page you see and interact with.

1. Initial Rendering
This is when the browser loads your page for the first time.

It parses the HTML, applies the CSS, runs JavaScript, and builds the DOM and CSSOM to show the final layout.

2. Re-rendering (Repainting)
Happens after the initial load, when something in the page changes (like a user click, form input, or JavaScript update).

The DOM is updated, and the browser re-renders the part that changed.

In JavaScript Frameworks (Like React, Vue)
In libraries like React, "rendering" refers to the process of generating the Virtual DOM based on component state and props, and then translating those to updates in the actual DOM.

Example in React:
jsx
Copy
Edit
function Greeting({ name }) {
  return <h1>Hello, {name}!</h1>;
}
When name changes, React re-renders the component ‚Äî meaning it runs the function again, creates a new Virtual DOM, and updates the real DOM only if necessary.

üñ•Ô∏è In Browser Context
Rendering is handled by the browser rendering engine (like Blink in Chrome or WebKit in Safari), and involves:

Parsing HTML ‚Üí Building the DOM tree

Parsing CSS ‚Üí Building the CSSOM tree

Combining both into a Render Tree

Layout ‚Üí Figuring out positions and sizes of elements

Painting ‚Üí Filling in pixels on the screen

Compositing ‚Üí Putting it all together in layers and showing the final view

üìä Server vs Client Rendering (in Modern Apps)
Type	Description
Client-Side Rendering (CSR)	Content is rendered in the browser using JavaScript (e.g., React, Angular).
Server-Side Rendering (SSR)	HTML is rendered on the server and sent to the browser. Faster first load.
Static Site Generation (SSG)	HTML is generated at build time (e.g., Next.js static export).
Hydration	Converts a static HTML page (from SSR or SSG) into a fully interactive page in the browser.
